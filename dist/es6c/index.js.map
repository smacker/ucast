{"version":3,"file":"index.js","sources":["../../src/interpreters.ts","../../src/interpreter.ts","../../src/defaults.ts"],"sourcesContent":["import { CompoundCondition, FieldCondition, Comparable } from '@ucast/core';\nimport { DynamoOperator } from './interpreter';\n\nexport const eq: DynamoOperator<FieldCondition> = (condition, query) => {\n  return query.where(condition.field, '=', condition.value);\n};\n\nexport const ne: DynamoOperator<FieldCondition> = (condition, query) => {\n  return query.where(condition.field, '<>', condition.value);\n};\n\nexport const lt: DynamoOperator<FieldCondition<Comparable>> = (\n  condition,\n  query\n) => {\n  return query.where(condition.field, '<', condition.value);\n};\n\nexport const lte: DynamoOperator<FieldCondition<Comparable>> = (\n  condition,\n  query\n) => {\n  return query.where(condition.field, '<=', condition.value);\n};\n\nexport const gt: DynamoOperator<FieldCondition<Comparable>> = (\n  condition,\n  query\n) => {\n  return query.where(condition.field, '>', condition.value);\n};\n\nexport const gte: DynamoOperator<FieldCondition<Comparable>> = (\n  condition,\n  query\n) => {\n  return query.where(condition.field, '>=', condition.value);\n};\n\nexport const exists: DynamoOperator<FieldCondition<Comparable>> = (\n  condition,\n  query\n) => {\n  if (condition.value) {\n    return query.whereRaw(`attribute_exists(${query.field(condition.field)})`);\n  }\n  return query.whereRaw(\n    `attribute_not_exists(${query.field(condition.field)})`\n  );\n};\n\nfunction manyParamsOperator(\n  name: string\n): DynamoOperator<FieldCondition<unknown[]>> {\n  return (condition, query) => {\n    return query.whereRaw(\n      `${query.field(condition.field)} ${name}(${query\n        .manyParams(condition.value)\n        .join(', ')})`\n    );\n  };\n}\n\nexport const within = manyParamsOperator('IN');\nexport const nin = manyParamsOperator('NOT IN');\n\nfunction compoundOperator(\n  combinator: 'AND' | 'OR',\n  isInverted: boolean = false\n) {\n  return ((node, query, { interpret }) => {\n    const childQuery = query.child();\n    node.value.forEach(condition => interpret(condition, childQuery));\n    return query.merge(childQuery, combinator, isInverted);\n  }) as DynamoOperator<CompoundCondition>;\n}\n\nexport const not = compoundOperator('AND', true);\nexport const and = compoundOperator('AND');\nexport const or = compoundOperator('OR');\nexport const nor = compoundOperator('OR', true);\n","import {\n  createInterpreter,\n  Condition,\n  InterpretationContext,\n} from '@ucast/core';\n\nexport class Query {\n  private _expressions: string[] = [];\n  private _names: Record<string, string> = {};\n  private _values: Record<string, unknown> = {};\n  private _placeholderString = 'p';\n  private _lastPlaceholderIndex: number = 1;\n\n  field(rawName: string) {\n    // support fields with the dot in name (escaped like 'a\\\\.b')\n    // and use placeholders to avoid conflicts with reserved words\n    //\n    // javascript doesn't support lookbehind, so reverse the string and use lookahead\n    const names = rawName\n      .split('')\n      .reverse()\n      .join('')\n      .split(/\\.(?!\\\\)/)!\n      .reverse()\n      .map(v => v.split('').reverse().join(''));\n\n    const keys = names.map(part => `#${part}`.replace(/\\\\\\./g, '_'));\n    keys.forEach((key, i) => {\n      this._names[key.replace(/\\[\\d+\\]/g, '')] = names[i]\n        .replace(/\\\\\\./g, '.')\n        .replace(/\\[\\d+\\]/g, '');\n    });\n    return keys.join('.');\n  }\n\n  param(value: unknown) {\n    const idx = this._lastPlaceholderIndex + Object.keys(this._values).length;\n    const key = `:${this._placeholderString}${idx}`;\n    this._values[key] = value;\n    return key;\n  }\n\n  manyParams(items: unknown[]) {\n    return items.map(value => this.param(value));\n  }\n\n  child() {\n    const query = new Query();\n    query._lastPlaceholderIndex = this._lastPlaceholderIndex + Object.keys(this._values).length;\n    return query;\n  }\n\n  where(field: string, operator: string, value: unknown) {\n    const expression = `${this.field(field)} ${operator} ${this.param(value)}`;\n    return this.whereRaw(expression);\n  }\n\n  whereRaw(expression: string) {\n    this._expressions.push(expression);\n    return this;\n  }\n\n  merge(\n    query: Query,\n    operator: 'AND' | 'OR' = 'AND',\n    isInverted: boolean = false\n  ) {\n    let expression = query._expressions.join(` ${operator} `);\n    if (expression[0] !== '(') {\n      expression = `(${expression})`;\n    }\n\n    this._expressions.push(`${isInverted ? 'NOT ' : ''}${expression}`);\n    this._names = { ...this._names, ...query._names };\n    this._values = { ...this._values, ...query._values };\n    return this;\n  }\n\n  toJSON(): [string, Record<string, string>, Record<string, unknown>] {\n    return [this._expressions.join(' AND '), this._names, this._values];\n  }\n}\n\nexport type DynamoOperator<C extends Condition> = (\n  condition: C,\n  query: Query,\n  context: InterpretationContext<DynamoOperator<C>>\n) => Query;\n\nexport function createDynamoInterpreter(\n  operators: Record<string, DynamoOperator<any>>\n) {\n  const interpret = createInterpreter<DynamoOperator<any>>(operators);\n  return (condition: Condition) => {\n    return interpret(condition, new Query()).toJSON();\n  };\n}\n","import * as interpreters from './interpreters';\n\nexport const allInterpreters = {\n  ...interpreters,\n  in: interpreters.within,\n};\n"],"names":["eq","condition","query","where","field","value","ne","lt","lte","gt","gte","exists","whereRaw","manyParamsOperator","name","manyParams","join","within","nin","compoundOperator","combinator","isInverted","node","interpret","childQuery","child","forEach","merge","not","and","or","nor","Query","_expressions","_names","_values","_placeholderString","_lastPlaceholderIndex","rawName","names","split","reverse","map","v","keys","part","replace","key","i","param","idx","Object","length","items","operator","expression","push","toJSON","createDynamoInterpreter","operators","createInterpreter","allInterpreters","interpreters","in"],"mappings":"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"}